# -*- coding: utf-8 -*-
# P≈ô√≠li≈° ≈ælu≈•ouƒçk√Ω k≈Ø≈à √∫pƒõl ƒè√°belsk√© √≥dy - testovac√≠ pangram

# Logov√°n√≠ bƒõhu programu do souboru pomoc√≠ metat≈ô√≠dy - z√°kladn√≠ varianta
"""_summary_
# Logov√°n√≠ bƒõhu programu pomoc√≠ metat≈ô√≠dy v Pythonu

Tento skript demonstruje pou≈æit√≠ metat≈ô√≠dy v Pythonu pro logov√°n√≠ bƒõhu programu. 
Metat≈ô√≠dy jsou pokroƒçil√Ωm konceptem v Pythonu, kter√Ω umo≈æ≈àuje modifikovat chov√°n√≠ 
t≈ô√≠d p≈ôi jejich vytv√°≈ôen√≠. V tomto p≈ô√≠kladu vyu≈æ√≠v√°me metat≈ô√≠du k automatick√©mu 
logov√°n√≠ vol√°n√≠ metod t≈ô√≠d `Auto` a `Letadlo`.

## Struktura skriptu

1. **Importy a nastaven√≠ cesty k logovac√≠mu souboru**:
    - Importujeme pot≈ôebn√© moduly `os` a `datetime`.
    - Nastav√≠me relativn√≠ cestu k logovac√≠mu souboru a zajist√≠me, ≈æe adres√°≈ô pro logy existuje.

2. **Glob√°ln√≠ p≈ôep√≠naƒç logov√°n√≠**:
    - Definujeme glob√°ln√≠ promƒõnnou `LOG_ENABLED`, kter√° umo≈æ≈àuje zapnout nebo vypnout logov√°n√≠.

3. **Funkce pro logov√°n√≠**:
    - `log_message(message)`: Zap√≠≈°e zpr√°vu do logovac√≠ho souboru, pokud je logov√°n√≠ povoleno.
    - `enable_logging()`: Zapne logov√°n√≠ a zap√≠≈°e tuto akci do logu.
    - `disable_logging()`: Vypne logov√°n√≠ a zap√≠≈°e tuto akci do logu.

4. **Zaznamen√°n√≠ startu skriptu**:
    - P≈ôi spu≈°tƒõn√≠ skriptu zaznamen√°me tuto ud√°lost do logu.

5. **Definice t≈ô√≠d `Auto` a `Letadlo`**:
    - Ka≈æd√° t≈ô√≠da m√° metody pro z√°kladn√≠ operace (nap≈ô. `start` a `stop` pro `Auto`, `vzlet` a `pristani` pro `Letadlo`).
    - V konstruktoru a metod√°ch tƒõchto t≈ô√≠d vol√°me funkci `log_message`, kter√° zaznamen√°v√° vytvo≈ôen√≠ instance a vol√°n√≠ metod.

6. **Test logov√°n√≠**:
    - Zapneme logov√°n√≠.
    - Vytvo≈ô√≠me instance t≈ô√≠d `Auto` a `Letadlo` a vol√°me jejich metody, co≈æ se zaznamen√° do logu.
    - Vypneme logov√°n√≠ a ovƒõ≈ô√≠me, ≈æe dal≈°√≠ vol√°n√≠ metod ji≈æ nejsou logov√°na.

7. **Zaznamen√°n√≠ ukonƒçen√≠ skriptu**:
    - P≈ôi ukonƒçen√≠ skriptu zaznamen√°me tuto ud√°lost do logu.

## Pou≈æit√≠ metat≈ô√≠dy
V tomto p≈ô√≠kladu nen√≠ metat≈ô√≠da explicitnƒõ definov√°na, ale koncept metat≈ô√≠dy by mohl 
b√Ωt pou≈æit k automatizaci logov√°n√≠ metod t≈ô√≠d. Metat≈ô√≠da by mohla p≈ôepsat metody t≈ô√≠d 
tak, aby automaticky volaly `log_message` p≈ôi ka≈æd√©m vol√°n√≠ metody. Tento skript slou≈æ√≠ 
jako z√°kladn√≠ p≈ô√≠klad, kter√Ω lze d√°le roz≈°√≠≈ôit o metat≈ô√≠du pro plnƒõ automatizovan√© logov√°n√≠.

Tento skript je vhodn√Ω pro studenty, kte≈ô√≠ se chtƒõj√≠ nauƒçit z√°klady logov√°n√≠ v Pythonu 
a pochopit, jak by mohly b√Ωt metat≈ô√≠dy vyu≈æity k automatizaci opakuj√≠c√≠ch se √∫kol≈Ø, 
jako je logov√°n√≠.
"""

import os
from datetime import datetime

# Nastaven√≠ relativn√≠ cesty k logu
LOG_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), "log")  # Relativn√≠ cesta k adres√°≈ôi /log
LOG_FILE = os.path.join(LOG_DIR, "method_calls_1.log")  # Pln√° cesta k logovac√≠mu souboru

# Pokud slo≈æka log neexistuje, vytvo≈ô√≠me ji
if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR)

# Glob√°ln√≠ p≈ôep√≠naƒç logov√°n√≠
LOG_ENABLED = True  # Lze zapnout/vypnout vol√°n√≠m enable_logging() / disable_logging()

def log_message(message):
    """Zap√≠≈°e zpr√°vu do logovac√≠ho souboru, pokud je logov√°n√≠ povoleno."""
    if LOG_ENABLED:
        with open(LOG_FILE, "a", encoding="utf-8") as log_file:
            log_file.write(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - {message}\n")

def enable_logging():
    """Zapne logov√°n√≠."""
    global LOG_ENABLED
    LOG_ENABLED = True
    print("‚úÖ Logov√°n√≠ povoleno.")
    log_message("‚úÖ Logov√°n√≠ povoleno.")

def disable_logging():
    """Vypne logov√°n√≠."""
    global LOG_ENABLED
    LOG_ENABLED = False
    print("‚ùå Logov√°n√≠ zak√°z√°no.")
    log_message("‚ùå Logov√°n√≠ zak√°z√°no.")


class MetaLogger(type):
    """Metat≈ô√≠da, kter√° automaticky p≈ôid√°v√° logov√°n√≠ ke v≈°em metod√°m t≈ô√≠dy."""

    def __new__(cls, name, bases, dct):
        """Obal√≠ v≈°echny metody logovac√≠ funkc√≠."""
        for attr_name, attr_value in dct.items():
            if callable(attr_value) and not attr_name.startswith("__"):  # Pouze metody, ne dunder
                dct[attr_name] = cls._log_method(attr_name, attr_value)
        return super().__new__(cls, name, bases, dct)

    @staticmethod
    def _log_method(method_name, method):
        """Obal√≠ metodu tak, aby se logovala p≈ôi ka≈æd√©m vol√°n√≠."""
        def wrapper(*args, **kwargs):
            if LOG_ENABLED:
                log_message(f"METACLASS: {method_name}, Argumenty: {args}, {kwargs}")
            return method(*args, **kwargs)
        return wrapper


class Auto(metaclass=MetaLogger):
    """T≈ô√≠da reprezentuj√≠c√≠ auto."""
    def __init__(self, model):
        self.model = model
        log_message(f"üì¢ Vytvo≈ôena instance Auto: {self.model}")

    def start(self):
        print(f"üöó {self.model} nastartovalo!")
        log_message(f"üì¢ {self.model} nastartovalo!")

    def stop(self):
        print(f"üöó {self.model} zastavilo!")
        log_message(f"üì¢ {self.model} zastavilo!")


class Letadlo(metaclass=MetaLogger):
    """T≈ô√≠da reprezentuj√≠c√≠ letadlo."""
    def __init__(self, name):
        self.name = name
        log_message(f"üì¢ Vytvo≈ôena instance Letadlo: {self.name}")

    def vzlet(self):
        print(f"‚úàÔ∏è {self.name} vzl√©tlo!")
        log_message(f"üì¢ {self.name} vzl√©tlo!")

    def pristani(self):
        print(f"‚úàÔ∏è {self.name} p≈ôist√°lo!")
        log_message(f"üì¢ {self.name} p≈ôist√°lo!")


# =============================================================================
# =============================================================================

if __name__ == "__main__":

    # Zaznamen√°n√≠ startu skriptu
    log_message(f"üöÄ === START {os.path.basename(__file__)} - {LOG_FILE} ===")
    print(f"üöÄ Skript spu≈°tƒõn.")
    # print(f"Logovac√≠ soubor: {LOG_FILE}")

    auto = Auto("Tesla")
    auto.start()
    auto.stop()

    letadlo = Letadlo("Boeing 747")
    letadlo.vzlet()
    letadlo.pristani()

    disable_logging()

    auto.start()  # Toto vol√°n√≠ u≈æ se nezaloguje

    # Zaznamen√°n√≠ ukonƒçen√≠ skriptu
    print("üèÅ Skript ukonƒçen.")
    LOG_ENABLED = True  # P≈ôi ukonƒçen√≠ skriptu se logov√°n√≠ automaticky vypne
    log_message(f"üèÅ === END Skript {os.path.basename(__file__)} ukonƒçen. ===\n\n")
